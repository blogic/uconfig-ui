/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SetupImport } from './routes/setup'
import { Route as ProtectedImport } from './routes/protected'
import { Route as LogoutImport } from './routes/logout'
import { Route as LoginImport } from './routes/login'
import { Route as ActionsImport } from './routes/actions'
import { Route as IndexImport } from './routes/index'
import { Route as ProtectedIndexImport } from './routes/protected/index'
import { Route as ProtectedWirelessImport } from './routes/protected/wireless'
import { Route as ProtectedSystemImport } from './routes/protected/system'
import { Route as ProtectedNetworkImport } from './routes/protected/network'
import { Route as ActionsRebootingImport } from './routes/actions/rebooting'
import { Route as ActionsConnectingImport } from './routes/actions/connecting'
import { Route as ActionsConfiguringImport } from './routes/actions/configuring'
import { Route as ProtectedWirelessIndexImport } from './routes/protected/wireless/index'
import { Route as ProtectedSystemIndexImport } from './routes/protected/system/index'
import { Route as ProtectedNetworkIndexImport } from './routes/protected/network/index'
import { Route as ProtectedClientsIndexImport } from './routes/protected/clients/index'
import { Route as ProtectedWirelessNewSsidImport } from './routes/protected/wireless/newSsid'
import { Route as ProtectedSystemTimezoneImport } from './routes/protected/system/timezone'
import { Route as ProtectedSystemSystemInfoImport } from './routes/protected/system/systemInfo'
import { Route as ProtectedSystemRestartImport } from './routes/protected/system/restart'
import { Route as ProtectedSystemHostnameImport } from './routes/protected/system/hostname'
import { Route as ProtectedSystemFirmwareImport } from './routes/protected/system/firmware'
import { Route as ProtectedSystemFactoryImport } from './routes/protected/system/factory'
import { Route as ProtectedNetworkServicesImport } from './routes/protected/network/services'
import { Route as ProtectedNetworkIpv6Import } from './routes/protected/network/ipv6'
import { Route as ProtectedNetworkIpv4Import } from './routes/protected/network/ipv4'
import { Route as ProtectedClientsMacAddressImport } from './routes/protected/clients/$macAddress'
import { Route as ProtectedWirelessInterfaceIdIndexImport } from './routes/protected/wireless/$interfaceId/index'
import { Route as ProtectedSystemFirmwareIndexImport } from './routes/protected/system/firmware/index'
import { Route as ProtectedSystemFirmwareUpgradeImport } from './routes/protected/system/firmware/upgrade'
import { Route as ProtectedWirelessInterfaceIdSsidIndexImport } from './routes/protected/wireless/$interfaceId/$ssid/index'

// Create/Update Routes

const SetupRoute = SetupImport.update({
  path: '/setup',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedRoute = ProtectedImport.update({
  path: '/protected',
  getParentRoute: () => rootRoute,
} as any)

const LogoutRoute = LogoutImport.update({
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const ActionsRoute = ActionsImport.update({
  path: '/actions',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedIndexRoute = ProtectedIndexImport.update({
  path: '/',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedWirelessRoute = ProtectedWirelessImport.update({
  path: '/wireless',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedSystemRoute = ProtectedSystemImport.update({
  path: '/system',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedNetworkRoute = ProtectedNetworkImport.update({
  path: '/network',
  getParentRoute: () => ProtectedRoute,
} as any)

const ActionsRebootingRoute = ActionsRebootingImport.update({
  path: '/rebooting',
  getParentRoute: () => ActionsRoute,
} as any)

const ActionsConnectingRoute = ActionsConnectingImport.update({
  path: '/connecting',
  getParentRoute: () => ActionsRoute,
} as any)

const ActionsConfiguringRoute = ActionsConfiguringImport.update({
  path: '/configuring',
  getParentRoute: () => ActionsRoute,
} as any)

const ProtectedWirelessIndexRoute = ProtectedWirelessIndexImport.update({
  path: '/',
  getParentRoute: () => ProtectedWirelessRoute,
} as any)

const ProtectedSystemIndexRoute = ProtectedSystemIndexImport.update({
  path: '/',
  getParentRoute: () => ProtectedSystemRoute,
} as any)

const ProtectedNetworkIndexRoute = ProtectedNetworkIndexImport.update({
  path: '/',
  getParentRoute: () => ProtectedNetworkRoute,
} as any)

const ProtectedClientsIndexRoute = ProtectedClientsIndexImport.update({
  path: '/clients/',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedWirelessNewSsidRoute = ProtectedWirelessNewSsidImport.update({
  path: '/newSsid',
  getParentRoute: () => ProtectedWirelessRoute,
} as any)

const ProtectedSystemTimezoneRoute = ProtectedSystemTimezoneImport.update({
  path: '/timezone',
  getParentRoute: () => ProtectedSystemRoute,
} as any)

const ProtectedSystemSystemInfoRoute = ProtectedSystemSystemInfoImport.update({
  path: '/systemInfo',
  getParentRoute: () => ProtectedSystemRoute,
} as any)

const ProtectedSystemRestartRoute = ProtectedSystemRestartImport.update({
  path: '/restart',
  getParentRoute: () => ProtectedSystemRoute,
} as any)

const ProtectedSystemHostnameRoute = ProtectedSystemHostnameImport.update({
  path: '/hostname',
  getParentRoute: () => ProtectedSystemRoute,
} as any)

const ProtectedSystemFirmwareRoute = ProtectedSystemFirmwareImport.update({
  path: '/firmware',
  getParentRoute: () => ProtectedSystemRoute,
} as any)

const ProtectedSystemFactoryRoute = ProtectedSystemFactoryImport.update({
  path: '/factory',
  getParentRoute: () => ProtectedSystemRoute,
} as any)

const ProtectedNetworkServicesRoute = ProtectedNetworkServicesImport.update({
  path: '/services',
  getParentRoute: () => ProtectedNetworkRoute,
} as any)

const ProtectedNetworkIpv6Route = ProtectedNetworkIpv6Import.update({
  path: '/ipv6',
  getParentRoute: () => ProtectedNetworkRoute,
} as any)

const ProtectedNetworkIpv4Route = ProtectedNetworkIpv4Import.update({
  path: '/ipv4',
  getParentRoute: () => ProtectedNetworkRoute,
} as any)

const ProtectedClientsMacAddressRoute = ProtectedClientsMacAddressImport.update(
  {
    path: '/clients/$macAddress',
    getParentRoute: () => ProtectedRoute,
  } as any,
)

const ProtectedWirelessInterfaceIdIndexRoute =
  ProtectedWirelessInterfaceIdIndexImport.update({
    path: '/$interfaceId/',
    getParentRoute: () => ProtectedWirelessRoute,
  } as any)

const ProtectedSystemFirmwareIndexRoute =
  ProtectedSystemFirmwareIndexImport.update({
    path: '/',
    getParentRoute: () => ProtectedSystemFirmwareRoute,
  } as any)

const ProtectedSystemFirmwareUpgradeRoute =
  ProtectedSystemFirmwareUpgradeImport.update({
    path: '/upgrade',
    getParentRoute: () => ProtectedSystemFirmwareRoute,
  } as any)

const ProtectedWirelessInterfaceIdSsidIndexRoute =
  ProtectedWirelessInterfaceIdSsidIndexImport.update({
    path: '/$interfaceId/$ssid/',
    getParentRoute: () => ProtectedWirelessRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/actions': {
      preLoaderRoute: typeof ActionsImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      preLoaderRoute: typeof LogoutImport
      parentRoute: typeof rootRoute
    }
    '/protected': {
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/setup': {
      preLoaderRoute: typeof SetupImport
      parentRoute: typeof rootRoute
    }
    '/actions/configuring': {
      preLoaderRoute: typeof ActionsConfiguringImport
      parentRoute: typeof ActionsImport
    }
    '/actions/connecting': {
      preLoaderRoute: typeof ActionsConnectingImport
      parentRoute: typeof ActionsImport
    }
    '/actions/rebooting': {
      preLoaderRoute: typeof ActionsRebootingImport
      parentRoute: typeof ActionsImport
    }
    '/protected/network': {
      preLoaderRoute: typeof ProtectedNetworkImport
      parentRoute: typeof ProtectedImport
    }
    '/protected/system': {
      preLoaderRoute: typeof ProtectedSystemImport
      parentRoute: typeof ProtectedImport
    }
    '/protected/wireless': {
      preLoaderRoute: typeof ProtectedWirelessImport
      parentRoute: typeof ProtectedImport
    }
    '/protected/': {
      preLoaderRoute: typeof ProtectedIndexImport
      parentRoute: typeof ProtectedImport
    }
    '/protected/clients/$macAddress': {
      preLoaderRoute: typeof ProtectedClientsMacAddressImport
      parentRoute: typeof ProtectedImport
    }
    '/protected/network/ipv4': {
      preLoaderRoute: typeof ProtectedNetworkIpv4Import
      parentRoute: typeof ProtectedNetworkImport
    }
    '/protected/network/ipv6': {
      preLoaderRoute: typeof ProtectedNetworkIpv6Import
      parentRoute: typeof ProtectedNetworkImport
    }
    '/protected/network/services': {
      preLoaderRoute: typeof ProtectedNetworkServicesImport
      parentRoute: typeof ProtectedNetworkImport
    }
    '/protected/system/factory': {
      preLoaderRoute: typeof ProtectedSystemFactoryImport
      parentRoute: typeof ProtectedSystemImport
    }
    '/protected/system/firmware': {
      preLoaderRoute: typeof ProtectedSystemFirmwareImport
      parentRoute: typeof ProtectedSystemImport
    }
    '/protected/system/hostname': {
      preLoaderRoute: typeof ProtectedSystemHostnameImport
      parentRoute: typeof ProtectedSystemImport
    }
    '/protected/system/restart': {
      preLoaderRoute: typeof ProtectedSystemRestartImport
      parentRoute: typeof ProtectedSystemImport
    }
    '/protected/system/systemInfo': {
      preLoaderRoute: typeof ProtectedSystemSystemInfoImport
      parentRoute: typeof ProtectedSystemImport
    }
    '/protected/system/timezone': {
      preLoaderRoute: typeof ProtectedSystemTimezoneImport
      parentRoute: typeof ProtectedSystemImport
    }
    '/protected/wireless/newSsid': {
      preLoaderRoute: typeof ProtectedWirelessNewSsidImport
      parentRoute: typeof ProtectedWirelessImport
    }
    '/protected/clients/': {
      preLoaderRoute: typeof ProtectedClientsIndexImport
      parentRoute: typeof ProtectedImport
    }
    '/protected/network/': {
      preLoaderRoute: typeof ProtectedNetworkIndexImport
      parentRoute: typeof ProtectedNetworkImport
    }
    '/protected/system/': {
      preLoaderRoute: typeof ProtectedSystemIndexImport
      parentRoute: typeof ProtectedSystemImport
    }
    '/protected/wireless/': {
      preLoaderRoute: typeof ProtectedWirelessIndexImport
      parentRoute: typeof ProtectedWirelessImport
    }
    '/protected/system/firmware/upgrade': {
      preLoaderRoute: typeof ProtectedSystemFirmwareUpgradeImport
      parentRoute: typeof ProtectedSystemFirmwareImport
    }
    '/protected/system/firmware/': {
      preLoaderRoute: typeof ProtectedSystemFirmwareIndexImport
      parentRoute: typeof ProtectedSystemFirmwareImport
    }
    '/protected/wireless/$interfaceId/': {
      preLoaderRoute: typeof ProtectedWirelessInterfaceIdIndexImport
      parentRoute: typeof ProtectedWirelessImport
    }
    '/protected/wireless/$interfaceId/$ssid/': {
      preLoaderRoute: typeof ProtectedWirelessInterfaceIdSsidIndexImport
      parentRoute: typeof ProtectedWirelessImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexRoute,
  ActionsRoute.addChildren([
    ActionsConfiguringRoute,
    ActionsConnectingRoute,
    ActionsRebootingRoute,
  ]),
  LoginRoute,
  LogoutRoute,
  ProtectedRoute.addChildren([
    ProtectedNetworkRoute.addChildren([
      ProtectedNetworkIpv4Route,
      ProtectedNetworkIpv6Route,
      ProtectedNetworkServicesRoute,
      ProtectedNetworkIndexRoute,
    ]),
    ProtectedSystemRoute.addChildren([
      ProtectedSystemFactoryRoute,
      ProtectedSystemFirmwareRoute.addChildren([
        ProtectedSystemFirmwareUpgradeRoute,
        ProtectedSystemFirmwareIndexRoute,
      ]),
      ProtectedSystemHostnameRoute,
      ProtectedSystemRestartRoute,
      ProtectedSystemSystemInfoRoute,
      ProtectedSystemTimezoneRoute,
      ProtectedSystemIndexRoute,
    ]),
    ProtectedWirelessRoute.addChildren([
      ProtectedWirelessNewSsidRoute,
      ProtectedWirelessIndexRoute,
      ProtectedWirelessInterfaceIdIndexRoute,
      ProtectedWirelessInterfaceIdSsidIndexRoute,
    ]),
    ProtectedIndexRoute,
    ProtectedClientsMacAddressRoute,
    ProtectedClientsIndexRoute,
  ]),
  SetupRoute,
])

/* prettier-ignore-end */
